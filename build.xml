<!--===========================================================================
  This is the build file for the Community Charting Components Plugin project.

  This build file will use the subfloor.xml and subfloor-js files as the
  default build process and should only override the tasks that need to differ
  from the common build file.

  See subfloor.xml and subfloor-js.xml for more details
============================================================================-->

<project name="CCC" basedir="." default="default">

    <description>
        This build file is used to create the CCC project
        and works with the subfloor.xml file.
    </description>

    <!-- Import the subfloor-js.xml file which contains all the default ant targets -->
    <import file="build-res/subfloor-js.xml"/>

    <!-- ant files for each ccc module-->
    <import file="build-res/build.def.xml" />
    <import file="build-res/build.pvc.xml" />
    <import file="build-res/build.protovis.xml" />
    <import file="build-res/build.protovis-msie.xml" />
    <import file="build-res/build.tipsy.xml" />
    <import file="build-res/build.jquery.tipsy.xml" />

    <property name="project.id.cdf" value="cdf" />
    <property name="project.id.pen" value="pen" />
    <property name="project.id.amd" value="amd" />


    <!-- location to expand the zipped contents of js dependencies (to be available for testing) -->
    <property name="js.expanded.lib.dir" value="package-res/resources/web/app/lib"/>
    <property name="js.source.dir" value="package-res/resources/web/app/js"/>
    <property name="js.requires.node" value="true"/>
    <property name="js.requires.karma" value="true"/>
    <property name="js.karma.config" value="karma.ci.conf.js"/>
    <property environment="env"/>


    <property name="license.js" value="build-res/partials/license.js" />

    <property name="rjs.path" value="node_modules/requirejs/bin/r.js"/>

    <property name="ccc.dist" value="${stage.dir}/ccc" />
    <property name="pen.dist" value="${stage.dir}/pen" />
    <property name="amd.dist" value="${stage.dir}/amd" />

    <!-- r.js config files -->


    <!-- main targets -->
    <target name="dist-ccc"
            description="Generates de CCC bundle"
            depends="build-def-ccc, build-pvc-ccc, build-protovis-ccc, build-protovis-msie-ccc, build-tipsy-ccc, build-jquery.tipsy-ccc" >

        <copy todir="${ccc.dist}">
            <fileset dir="${bin.dir}/output"></fileset>
        </copy>
    </target>

    <target name="dist-pen"
            description="Generates de Pen bundle"
            depends="build-def-pen, build-pvc-pen, build-protovis-pen, build-protovis-msie-pen, build-tipsy-pen, build-jquery.tipsy-pen" >

        <copy todir="${pen.dist}">
            <fileset dir="${bin.dir}/output"></fileset>
        </copy>
    </target>

    <target name="dist-amd"
            description="Generates de Pen bundle"
            depends="build-def-amd, build-pvc-amd, build-protovis-amd, build-protovis-msie-amd, build-tipsy-amd, build-jquery.tipsy-amd" >

        <copy todir="${amd.dist}">
            <fileset dir="${bin.dir}/output"></fileset>
        </copy>
    </target>


    <target name="assemble" depends="dist-ccc, dist-pen, dist-amd" >
        <delete dir="${bin.dir}/output"/>
    </target>

    <target name="generate-test-bundle">
        <exec executable="./generateTestBundle.sh">
        </exec>
    </target>


    <target name="npm-install">
        <exec executable="npm">
            <arg value="install"/>
        </exec>
    </target>


    <target name="test-js" depends="npm-install, generate-test-bundle">
        <!-- we have karma available, use it to run the tests -->
        <exec executable="karma">
            <arg value="start"/>
            <arg value="${js.karma.config}"/>
            <arg value="--single-run"/>
        </exec>
    </target>


</project>